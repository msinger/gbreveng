 1  GND
 2  Battery LED
 3  -19V
 4  P11
 5  P14
 6  P13
 7  P12
 8  P10
 9  P15
10  GND
11  VCC
12  VSync
13  FR - Frame inversion signal (aka. ALTSIGL)
14  Pixel clock
15  D1 - Pixel data MSB
16  D0 - Pixel data LSB
17  HSync
18  Latch
19  Timing signal for generating lighter pixels (aka. CONTROL)
20  Speaker
21  GND

* Pixel clock is inverted GB clock when clocking out pixels
* Pixel clock is non-inverted GB clock for the one clock pulse during HSync

* Enabling PPU:
  - Latch starts low
  - Altsig starts high
  - Initial values get set on rising edge
  - First line of first frame after enabling will not handle sprites.
    -> This is because during OAM search, OAM is not locked by PPU. So PPU probably reads 0xff from OAM.
       OAM gets locked during pixel transfer stage though.

* When PPU off:
  - Latch&Altsig toggle on rising edge of GB clk
  - Latch toggles every 256 GB clk cycles
  - Altsig toggles every 512 GB clk cycles
  - They are in sync: when Altsig toggles, Latch also toggles
  - Has nothing to do with the moment of switching off PPU.
    May be wired to 2 bits of the DIV register.

* When PPU on:
  - Latch&Altsig toggle on falling edge of GB clk

* D0&D1 glitch to high for a fraction of a clk cycle at rising edge of GB clk when writing
  background palette register to the same value it already has while PPU is disabled

* Enabling PPU timeline:
    (Starts with first pixel row, but VSync=0)
  1. On write to 0xff40, on rising edge, Latch=0 & Altsig=1
  2. 27.5 GB clk cycles after (1), on falling edge, Control=1
  3. 4 GB clk cycles after (2), Control=0
  4. 47 GB clk cycles after (3), HSync=1, PPU claims VRAM
  5. 6.5 + (scx%8) GB clk cycles after (4), on rising edge, pixel clock emits one cycle (is high
     for 0.5 cycles)
  6. 14.5 + (scx%8) + ((wx<=7)?6:0) + X GB clk cycles after (4), on rising edge, HSync=0
     (X are additional cycles for sprites)

* Ctrl timeline:
  1. Ctrl=1 on falling edge of GB clk (represents (2) of Enabling PPU timeline)
  2. 4 GB clk cycles after (1), Ctrl=0 (represents (3) of Enabling PPU timeline)
  3. 148 GB clk cycles after (2), Ctrl=1
  4. 4 GB clk cycles after (3), Ctrl=0
  5. 148 GB clk cycles after (4), Ctrl=1
  6. 4 GB clk cycles after (5), Ctrl=0
  7. 116 GB clk cycles after (6), Ctrl=1
  8. 8 GB clk cycles after (7), Ctrl=0
  9. 24 GB clk cycles after (8), which is also 148 GB clk cycles after (6), repeat on (1)
  #. Also on (7), Latch=1
  #. 4 GB clk cycles after (7), which is also 4 GB clk cycles before (8), Altsig toggles, Latch=0

* HSync goes high 45 GB clk cycles after (2) of Ctrl timeline, except for the very first line after
  enabling the PPU (see (4) of Enabling PPU timeline)

* HSync is high for at least 14.5 GB clk cycles
  - xscroll makes it longer by (scx%8) GB clk cycles
  - window and sprites make it longer iff they need to be loaded before the first visible pixels
* HSync rises about 100ns after GB clk falling edge
* HSync falls about 150ns after GB clk rising edge
* For normal speed GB clk, this delay makes it seem like it is on for 15 cycles, falling on
  the falling GB clk edge
* The pixel clock pulse during HSync starts 6.5 + (scx%8) GB clk cycles after HSync rising edge
* First visible pixel gets shifted out 0.5 GB cycles after HSync falling edge (pixel clock
  rises 0.5 GB clk cycles after HSync falls. On normal GB clk speed, due to HSync delay, it
  looks like pixel clock rises the same time that HSync falls.)
* Even if window starts immediately (wx<=7), xscroll makes HSync even longer
* Even though xscroll stretches HSync before the pixel clock pulse, the dropped pixels are getting
  shifted out after the pixel clock pulse. // TODO: check if there are really no pixels before the
                                                    clock pulse
* Falling edge of HSync always happens 0.5 GB clk cycles before pixel clock rises for shifting out
  the first visible pixel. HSync can be stretched by xscroll, window and sprites that need to be
  loaded before the first visible pixel gets shifted out.

* Each pixel row (except directly after enabling PPU) timeline:
  1. on falling edge of GB clk, Latch=1, Control=1 (represents (7) of Ctrl timeline)
  2. 4 GB clk cycles after (1), Latch=0, Altsig toggles
  3. Only on first or second row of each frame:
     2 GB clk cycles after (2), VSync=1 on first row, VSync=0 on second row
  4. 4 GB clk cycles after (2), Control=0 (represents (8) of Ctrl timeline)
  5. 24 GB clk cycles after (4), Control=1 (represents (1) of Ctrl timeline)
  6. 4 GB clk cycles after (5), Control=0 (represents (2) of Ctrl timeline)
  7. 45 GB clk cycles after (6), HSync=1, D0&D1 may start changing, PPU claims VRAM
  8. 6.5 + (scx%8) GB clk cycles after (7), on rising edge, pixel clock emits one cycle (is high
     for 0.5 cycles)
  9. 14.5 + (scx%8) + ((wx<=7)?6:0) + X GB clk cycles after (7), on rising edge, HSync=0
     (X are additional cycles for sprites)

* Latch, Altsig and Control keep repeating their pattern even between the frames where no pixel
  rows are shifted out.

* Altsig does an extra toggle after the last line of each frame 2 GB clk cycles before the normal
  toggle happens. That's in the middle of the Latch pulse, or 2 GB clk cycles after (1) of
  Each pixel row timeline.

* Disabling PPU:
  - Happens immediately.
  - D0, D1, Ctrl, VSync and HSync get cut off (set to low) on rising edge of GB clk.
    (HSync seems to cut off on falling edge, but this is due to some delay. When slowing down
     GB clk, can be clearly assigned to the same rising edge.)
  - Altsig and Latch get cut off and continue their regular "PPU off" pattern on same rising edge.

* VRAM access
  - While PPU has claimed VRAM, it releases !CS and !RD (set to high) when it does not
    need data from VRAM.
  - While PPU hasn't claimed VRAM, !RD is always low, except if CPU is writing to VRAM.
  - PPU releases VRAM claim immediately on the falling edge of the pixel clock pulse of
    the last pixel.

* Pixel clock gets streched during high phase when window x triggers (for x>7). Stretches it from
  0.5 to at least 6.5 GB clk cycles.
* Pixel clock gets streched during high phase when sprite x triggers (for x>8).

* Pixel color (D0&D1) gets set 1 GB clk cycle before the pixel clock rises.
* GUESS: Rising pixel clock triggers shift register in column driver.
* D0&D1 change to color of next pixel on same rising edge of pixel clock.
* ALTERNATIVE GUESS: The falling edge of the result of the operation
                        px_clk <OR> HSync
                     triggers shift register in column driver. This would explain why HSync is
                     always stretched just before the first visible pixel, and why pixel clock
                     gets stretched for window and sprite loads after the HSync phase.

* PPU loads pixel data into upper half of pixel FIFO. At beginning of each line, lower half of
  pixel FIFO contains garbage pixels from previous line, which gets shifted out during HSync.

* Sprites with x=0 get loaded during HSync and then completely shifted out, stretching HSync.
* Sprites with x=0 get loaded before the pixel clock pulse during HSync and shifted out after
  the pixel clock pulse.
* Sprites with x>=1 and x<=8 get loaded after the pixel clock pulse during HSync, and in case
  of x<8, at least partially shifted out during HSync.
